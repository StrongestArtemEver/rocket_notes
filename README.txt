# Документация для проекта на Rust

## Описание проекта

Этот проект представляет собой веб-приложение для управления заметками, реализованное с использованием фреймворка Rocket и библиотеки SQLx для работы с базой данных PostgreSQL. Приложение позволяет создавать, просматривать и сохранять заметки в базе данных.

## Установка

### Предварительные требования

Перед началом установки убедитесь, что у вас установлены следующие компоненты:

- [Rust](https://www.rust-lang.org/tools/install)
- [PostgreSQL](https://www.postgresql.org/download/)
- [Cargo](https://doc.rust-lang.org/cargo/getting-started/installation.html)
- [Git](https://git-scm.com/downloads)

### Шаги по установке

1. **Клонирование репозитория**

    Склонируйте репозиторий проекта на ваш локальный компьютер:

    ```sh
    git clone https://github.com/your-username/your-repo-name.git
    cd your-repo-name
    ```

2. **Создание и настройка базы данных**

    Создайте базу данных PostgreSQL и настройте подключение к ней:

    ```sh
    psql -U postgres -c "CREATE DATABASE your_db_name;"
    ```

3. **Создание файла `.env` на основе `env-public`**

    Скопируйте файл `env-public` в `.env` и отредактируйте его с вашими реальными значениями:

    ```sh
    cp env-public .env
    ```

    Откройте файл `.env` и замените значения переменных окружения на реальные:

    ```env
    DATABASE_URL=postgres://username:password@localhost/your_db_name
    ```

4. **Установка зависимостей**

    Выполните команду для установки всех необходимых зависимостей:

    ```sh
    cargo build
    ```

5. **Инициализация базы данных**

    Выполните миграции для настройки схемы базы данных:

    ```sh
    diesel setup
    diesel migration run
    ```

## Запуск проекта

Для запуска приложения выполните следующую команду:

```sh
cargo run
```

Приложение будет доступно по адресу [http://localhost:8000](http://localhost:8000).

## API эндпоинты

### Получение всех заметок

- **URL:** `/api/notes`
- **Метод:** `GET`
- **Описание:** Возвращает список всех заметок.

#### Пример запроса

```sh
curl http://localhost:8000/api/notes
```

#### Пример ответа

```json
[
  {
    "id": 1,
    "content": "First note"
  },
  {
    "id": 2,
    "content": "Second note"
  }
]
```

### Создание новой заметки

- **URL:** `/api/notes`
- **Метод:** `POST`
- **Описание:** Создает новую заметку.
- **Тело запроса:**

    ```json
    {
      "content": "New note content"
    }
    ```

#### Пример запроса

```sh
curl -X POST http://localhost:8000/api/notes -H "Content-Type: application/json" -d '{"content": "New note content"}'
```

#### Пример ответа

```json
{
  "id": 3,
  "content": "New note content"
}
```

## Структура проекта

```
my_backend/
├── Cargo.toml
├── src/
│   ├── main.rs
│   ├── models.rs
│   ├── routes.rs
│   ├── errors.rs
├── static/
│   ├── index.html
│   ├── style.css
│   ├── script.js
├── .env
├── env-public
```

### Описание файлов

- **Cargo.toml:** Файл конфигурации проекта, содержащий список зависимостей.
- **src/main.rs:** Главный файл проекта, содержащий точку входа в приложение.
- **src/models.rs:** Файл, содержащий определения моделей данных.
- **src/routes.rs:** Файл, содержащий обработчики маршрутов.
- **src/errors.rs:** Файл, содержащий обработчики ошибок.
- **static/:** Директория, содержащая статические файлы (HTML, CSS, JS).
- **.env:** Файл с конфиденциальными переменными окружения (не должен быть включен в систему контроля версий).
- **env-public:** Пример файла переменных окружения (должен быть включен в систему контроля версий).

## Разработка и вклад

### Внесение изменений

1. **Создайте новую ветку для ваших изменений:**

    ```sh
    git checkout -b my-new-feature
    ```

2. **Внесите изменения и сделайте коммит:**

    ```sh
    git add .
    git commit -m "Add some feature"
    ```

3. **Отправьте изменения в вашу ветку:**

    ```sh
    git push origin my-new-feature
    ```

4. **Создайте Pull Request на GitHub.**

### Контактная информация

Если у вас возникли вопросы или предложения, пожалуйста, свяжитесь с нами по электронной почте: your-email@example.com.

## Лицензия

Этот проект распространяется по лицензии MIT. Подробности смотрите в файле `LICENSE`.

---